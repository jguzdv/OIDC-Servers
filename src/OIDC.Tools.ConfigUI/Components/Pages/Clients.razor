@page "/"
@page "/clients"

@using OpenIddict.Abstractions
@using OpenIddict.Core

@inject IOpenIddictApplicationManager _applicationManager

<div class="d-flex justify-content-between">
    <h2>Clients</h2>
    <div>
        <a class="btn btn-primary" href="/client">
            <i class="fa fa-fw fa-plus"></i> Add Client
        </a>
    </div>
</div>
<table class="table table-striped table-hover mw-100 align-middle">
    <thead>
        <tr>
            <th>Client ID</th>
            <th>Client Name</th>
            <th>Redirect URIs</th>
            <th></th>
        </tr>
        <tr>
            <th>
                <input type="text" value="@IdSearchString" @oninput="(e) => { IdSearchString = e.Value.ToString(); FilterClients(); }" class="form-control form-control-search form-control-sm" id="search-client-id">
            </th>
            <th>
                <input type="text" value="@NameSearchString" @oninput="(e) => { NameSearchString = e.Value.ToString(); FilterClients(); }" class="form-control form-control-search form-control-sm" id="search-client-name">
            </th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var app in _filteredApplications.OrderBy(x => x.ClientId))
        {
            <tr>
                <td>@app.ClientId</td>
                <td>@app.DisplayName</td>
                <td>
                    <ul class="ps-0 mb-0">
                        @foreach (var uri in app.RedirectUris.Take(3))
                        {
                            <li class="text-truncate">@uri</li>
                        }
                        @if (app.RedirectUris.Count() > 3)
                        {
                            <li class="text-truncate"><i class="fas fa-ellipsis-h"></i></li>
                        }
                    </ul>
                </td>
                <td class="text-nowrap">
                    <a class="btn btn-primary" href=@(($"/client/{app.ClientId}"))><i class="fa fa-fw fa-pencil"></i></a>
                    <a class="btn btn-danger"><i class="fa fa-fw fa-trash"></i></a>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<OpenIddictApplicationDescriptor> _applications = [];
    private List<OpenIddictApplicationDescriptor> _filteredApplications = [];

    private string IdSearchString { get; set; } = string.Empty;
    private string NameSearchString { get; set; } = string.Empty;
    

    protected override async Task OnParametersSetAsync()
    {
        var applications = _applicationManager.ListAsync();
        await foreach (var application in applications)
        {
            var appDescriptor = new OpenIddictApplicationDescriptor();
            await _applicationManager.PopulateAsync(appDescriptor, application);

            _applications.Add(appDescriptor);
        }

        _filteredApplications = _applications;
    }

    public void FilterClients()
    {
        _filteredApplications = _applications
            .Where(app =>
                (string.IsNullOrEmpty(IdSearchString) || (!string.IsNullOrEmpty(app.ClientId) && app.ClientId.Contains(IdSearchString, StringComparison.OrdinalIgnoreCase))) &&
                (string.IsNullOrEmpty(NameSearchString) || (!string.IsNullOrEmpty(app.DisplayName) && app.DisplayName.Contains(NameSearchString, StringComparison.OrdinalIgnoreCase)))
            )
            .ToList();
    }
}