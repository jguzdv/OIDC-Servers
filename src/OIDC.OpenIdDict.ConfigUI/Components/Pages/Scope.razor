@page "/scope"
@page "/scope/{*scopeName}"

@using JGUZDV.OIDC.ProtocolServer.Model
@using global::OpenIddict.Abstractions

@inject IOpenIddictScopeManager _scopeManager

<div class="container">
    @if (_scope != null || _createNew)
    {
        <div class="card mb-4">
            <div class="card-header">
                <div class="d-flex justify-content-between">
                    <h2>@ScopeDescriptor.DisplayName</h2>
                    <button class="btn btn-success" @onclick="() => SaveChanges()"><i class="fa fa-fw fa-save"></i></button>
                </div>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-6">
                        <div class="mb-3">
                            <label for="client-id">Scope Name</label>
                            <input type="text" id="client-id" class="form-control" @bind-value="@ScopeDescriptor.Name" />
                        </div>
                        <div class="mb-3">
                            <label for="client-name">Display Name</label>
                            <input type="text" id="client-name" class="form-control" @bind-value="@ScopeDescriptor.DisplayName" />
                        </div>
                        <div class="mb-3">
                            <h3 class="h4">Target token</h3>
                            @foreach (var destination in Destinations)
                            {
                                <PermissionToggle Permissions="@ScopeProperties.TargetToken" Permission="@destination" DisplayName="@destination" />
                            }
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="mb-3">
                            <h3 class="h4">Requested claim types</h3>
                            <ClaimTypeList Items="@ScopeProperties!.RequestedClaimTypes" />
                        </div>

                        <div class="mb-3">
                            <h3 class="h4">Static claims</h3>
                            <ClaimList Items="@ScopeProperties!.StaticClaims" />
                        </div>

                        <div>
                            <h3 class="h4">Resources</h3>
                            <StringList Items="@ScopeDescriptor.Resources" />
                        </div>

                        <div class="mb-3">
                            <h3 class="h4">MFA</h3>
                            <MfaEditor Value="@ScopeProperties!.MFA" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <p>Loading... (ActivityIndicator)</p>
    }
</div>

@code {
    [Parameter]
    public required string ScopeName { get; set; }

    private object? _scope;
    private bool _createNew;

    private OpenIddictScopeDescriptor ScopeDescriptor { get; set; } = new();
    private ScopeProperties ScopeProperties { get; set; } = new();

    private List<string> Destinations = new() { OpenIddictConstants.Destinations.AccessToken, OpenIddictConstants.Destinations.IdentityToken };

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        _createNew = ScopeName == null;

        if (!_createNew)
        {
            // Load the client details
            _scope = await _scopeManager.FindByNameAsync(ScopeName);
            if (_scope == null)
            {
                // TODO: Add toasts and use it here
                NavigationManager.NavigateTo("/scopes");
                return;
            }

            await _scopeManager.PopulateAsync(ScopeDescriptor, _scope);
            ScopeProperties = ScopeProperties.DeserializeFromProperties(ScopeDescriptor.Properties);
        }

        else
        {
            ScopeDescriptor = new();
            ScopeProperties = new ScopeProperties();
        }
    }

    private async Task SaveChanges()
    {
        ScopeDescriptor.Properties[CustomProperties.PropertyName] = ScopeProperties.Serialize();

        if (_scope == null)
        {
            await _scopeManager.CreateAsync(ScopeDescriptor);
        }
        else
        {
            await _scopeManager.UpdateAsync(_scope, ScopeDescriptor);
        }

        NavigationManager.NavigateTo("/scopes");
    }
}